<launch>

	<!-- By default, we are not in debug mode -->
	<arg name="debug" default="false" />

	<!-- Which sensor file to include? vrep or real -->
	<arg name="sensor_file" default="vrep" />

	<param name="/move_group/trajectory_execution/execution_duration_monitoring" value="false" />
	<param name="/move_group/plan_execution/max_replan_attempts" value="100" />
	<param name="/move_group/ompl/minimum_waypoint_count" value="10" />
	<param name="/move_group/max_sampling_attempts" value="200" />

	<include file="$(find omnirob_moveit_config)/launch/move_group.launch">
		<arg name="allow_trajectory_execution" value="true" />
		<arg name="fake_execution" value="false" />
		<arg name="info" value="true" />
		<arg name="debug" value="$(arg debug)" />
	</include>	

	<!-- If needed, broadcast static tf for robot root -->
	<node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0"
		args="0 0 0 0 0 0 world base_link 100" />


	<!-- We do not have a robot connected, so publish fake joint states -->
	<!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"> 
		<param name="/use_gui" value="false"/> <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam> 
		</node -->

	<!-- Given the published joint states, publish tf for the robot links -->
	<node name="robot_state_publisher" pkg="robot_state_publisher"
		type="robot_state_publisher" respawn="true" output="screen" />

	<include file="$(find lbr_vrep_interface)/launch/connect.launch" />

	<!-- Run Rviz and load the default config to see the state of the move_group 
		node -->
	<!-- include file="$(find omnirob_moveit_config)/launch/moveit_rviz.launch"> 
		<arg name="config" value="true" /> <arg name="debug" value="$(arg debug)" 
		/> </include -->

</launch>
