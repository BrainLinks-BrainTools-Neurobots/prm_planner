<launch>
	<rosparam command="load" ns="prm_planner" file="$(find prm_planner)/config/params.yaml" />
	<rosparam command="load" ns="prm_planner/problem_definitions" file="$(find prm_planner)/config/problems.yaml" />
	<rosparam command="load" ns="prm_planner/robots" file="$(find prm_planner)/config/robots.yaml" />

	<!-- If needed, broadcast static tf for robot root -->
	<node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 omnirob_lbr/base_link omnirob_lbr/base_link_interactive_marker 100" />
	<node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_2" args="0 0 0 0 0 0 omnirob_lbr/base_link omnirob_lbr/base_link_trajectory 100" />

	<group ns="omnirob_lbr">
		<include file="$(find prm_planner)/launch/include/robots/omnirob.xml">
			<arg name="load_robot_description" value="true" />
			<arg name="robot_description" value="robot_description" />
		</include>
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
			<remap from="joint_states" to="/joint_states" />
			<param name="tf_prefix" type="string" value="omnirob_lbr" />
		</node>
		<param name="collision_matrix" type="string" value="$(find omnirob_description)/collision_matrices/omnirob_lbr_sdh2.cm" />
	</group>

	<node name="rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find prm_planner)/config/omnirob_arm.rviz" output="screen" />

	<include file="$(find realtime_urdf_filter)/launch/realtime_urdf_filter_sim.launch"></include>
</launch>