<launch>
	<rosparam command="load" ns="prm_planner" file="$(find iiwa_vrep_grasp_problem)/config/params.yaml" />
	<rosparam command="load" ns="prm_planner/problem_definitions" file="$(find iiwa_vrep_grasp_problem)/config/problems.yaml" />
	<rosparam command="load" ns="prm_planner/robots" file="$(find prm_planner_robot_configs)/config/iiwa_sdh2.yaml" />

	<!-- If needed, broadcast static tf for robot root -->
	<node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 iiwa/iiwa_base_link iiwa/interactive_marker_iiwa_base_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 iiwa/iiwa_base_link iiwa/trajectory_iiwa_base_link 100" />

	<!-- Given the published joint states, publish tf for the robot links -->
	<group ns="iiwa">
		<param name="robot_description" textfile="$(find iiwa_description)/urdf/iiwa_sdh2.urdf"/>

		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
			<param name="tf_prefix" type="string" value="iiwa" />
		</node>

		<param name="collision_matrix" type="string" value="$(find iiwa_description)/collision_matrices/iiwa_sdh2.cm" />

		<!-- publishers -->
		<node name="sdh2_publisher" pkg="vrep_interface" type="kuka_sdh_interface">
			<param name="vrep_prefix" type="string" value="iiwa" />
		</node>
		<node name="iiwa_publisher" pkg="vrep_interface" type="kuka_iiwa_interface" />
	</group>

	<node name="rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find iiwa_vrep_grasp_problem)/rviz/iiwa.rviz" output="screen"/>
	
	<include file="$(find realtime_urdf_filter)/launch/iiwa_sim.launch"/>
</launch>
